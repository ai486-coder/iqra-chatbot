<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Iqra University Admission Policy Chatbot</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body { font-family: 'Inter', sans-serif; }
    </style>
</head>
<body>
    <div id="root"></div>

    <!-- Include React and ReactDOM as global scripts -->
    <script src="https://unpkg.com/react@17/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@17/umd/react-dom.development.js"></script>
    <!-- Include Babel for JSX transpilation in the browser -->
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    
    <script type="text/babel">
        // Access React and ReactDOM from the global window object
        const { useState, useEffect, useRef } = window.React;
        const ReactDOM = window.ReactDOM;

        // Main App component for the Iqra University Admission Policy chatbot
        function App() {
            const [messages, setMessages] = useState([]); // State to store chat messages
            const [inputMessage, setInputMessage] = useState(''); // State for the user's input message
            const [isLoading, setIsLoading] = useState(false); // State to indicate if the LLM is generating a response
            const messagesEndRef = useRef(null); // Ref to scroll to the latest message

            // Iqra University Admission Policy Knowledge Base
            const knowledgeBase = [
                {
                    id: 'general_policy',
                    title: 'General Admission Policy',
                    content: `Admissions at Iqra University are based on merit only, following a careful review of all applicant credentials, without discrimination based on race, gender, age, religion, marital status, physical disabilities, or national origin. Applicants must pass an admission test, interview, and fulfill eligibility criteria. The University reserves the right to change its admissions policy without prior notice. Admissions are announced two months prior to semester commencement. Semesters are Spring (March-June, admissions in November), Summer (July-September, admissions in April), and Fall (October-February, admissions in August).`,
                    keywords: ['general policy', 'merit', 'discrimination', 'admission test', 'interview', 'eligibility', 'semester dates', 'spring', 'summer', 'fall']
                },
                {
                    id: 'bachelor_4_year',
                    title: 'Bachelor\'s (4-Year) Program Eligibility',
                    content: `For 4-Year Bachelor's programs (BBA-H, BS Accounting & Finance, BS International Relations, BS English, BS Computing Programs), applicants need at least 45% marks in Higher Secondary School Certificate (HSSC) or equivalent from a recognized Institute/Board. For Computing Programs specifically (BS Computer Science, BS Software Engineering, BS Artificial Intelligence), minimum 50% marks are required in HSSC Pre-Engineering or equivalent with Mathematics, Physics, Chemistry. Pre-Medical students (Physics, Chemistry, Biology) with 50% can apply but must take two additional Math courses (6 credit hours) in their first year. A-Levels or other foreign qualifications require an IBCC equivalence certificate with at least 50% marks. A minimum of 60% marks in Diploma is also accepted for some admissions.`,
                    keywords: ['bachelor 4 year', 'eligibility', 'undergraduate', 'HSSC', 'A-Levels', 'IBCC', 'BBA', 'BS', 'computer science', 'software engineering', 'artificial intelligence', 'pre-engineering', 'pre-medical', 'diploma']
                },
                {
                    id: 'bachelor_2_5_year',
                    title: 'Bachelor\'s (2.5-Year) Program Eligibility',
                    content: `For 2.5-Year Bachelor's programs, candidates should have 15 years of schooling with a business qualification (e.g., B.Com 3 Years, BBA 3 years) or 14 years of schooling with a non-business qualification (e.g., B.Com 2 Years, BA, B-Tech, B.Sc. or any two-year Graduation Programme).`,
                    keywords: ['bachelor 2.5 year', 'eligibility', '15 years schooling', '14 years schooling', 'B.Com', 'BBA', 'BA', 'B.Sc.']
                },
                {
                    id: 'pharmd_eligibility',
                    title: 'Doctor of Pharmacy (Pharm D) Eligibility',
                    content: `For Doctor of Pharmacy (Pharm D), a minimum overall score of 60% in the pre-medical group of Higher Secondary School Certificate or equivalent in Pakistan is required. British Advanced Level Certification with Biology, Chemistry, and Physics with over 60% in IBCC Equivalence is also accepted.`,
                    keywords: ['Pharm D', 'Doctor of Pharmacy', 'eligibility', 'pre-medical', 'HSSC', 'A-Levels', 'IBCC']
                },
                {
                    id: 'master_program_eligibility',
                    title: 'Master\'s Program Eligibility',
                    content: `For Master's Programs, the number of credit hours required for the degree will align with HEC policies. Generally, 16 years of undergraduate non-business qualification will require 72 credit hours. Applicants who are Iqra University Graduates need 70% or equivalent CGPA. Others need a 3.0 GPA or equivalent percentage from recognized universities/degree awarding institutions for a minimum of 14-years of schooling. Institutions mentioning both division and CGPA must meet either condition.`,
                    keywords: ['master program', 'eligibility', 'HEC policy', 'credit hours', 'CGPA', 'GPA']
                },
                {
                    id: 'mphil_program_eligibility',
                    title: 'M.Phil. Program Eligibility',
                    content: `Eligible applicants for M.Phil. programs include those with Old MBA/MPA/M.com/ICMA/ICA/B.com (4 years) or BBA 4-year program with minimum 135 credit hours. A minimum division or CGPA on a scale of 4 as prescribed by HEC for MPhil/MS programs is required. GAT-General or equivalent test with a minimum 50% cumulative score is also required.`,
                    keywords: ['M.Phil.', 'eligibility', 'MBA', 'MPA', 'B.com', 'BBA', 'HEC', 'GAT-General']
                },
                {
                    id: 'phd_program_eligibility',
                    title: 'Ph.D. Program Eligibility',
                    content: `For Ph.D. in Computer Sciences, an MS in Computer Sciences with a minimum of 36 credit hours (24 coursework) and a minimum CGPA of 3.0 on a 4.0 scale is required. For Ph.D. in Business Administration, an MS/M.Phil in the relevant field, or MBA with 90 credit hours (2-year bachelor's) or 36 credit hours (4-year bachelor's) in the relevant field, with a minimum CGPA of 3.0 on a 4.0 scale. Additionally, candidates must pass Subject GRE (international) test with 60% percentile score or GAT Subject with minimum 60% marks or University administered GAT Subject with 70% marks.`,
                    keywords: ['Ph.D.', 'eligibility', 'computer sciences', 'business administration', 'MS', 'M.Phil.', 'MBA', 'CGPA', 'GRE Subject', 'GAT Subject']
                },
                {
                    id: 'equivalence_certificate',
                    title: 'Equivalence Certificate Requirement',
                    content: `Applicants with A-Levels or other foreign qualifications must provide an Equivalence Certificate issued by the Intermediate Board Committee of Chairmen (IBCC). This certificate confirms that their foreign qualification is equivalent to the Pakistani Higher Secondary School Certificate. For Pharm D, the score on the IBCC Equivalence must be over 60% (Pre-Medical).`,
                    keywords: ['equivalence certificate', 'IBCC', 'A-Levels', 'foreign qualification', 'HSSC equivalent']
                },
                {
                    id: 'transfer_policy',
                    title: 'Transfer of Credits Policy',
                    content: `All transfer students must have been enrolled in an HEC recognized institution and fulfill all admission requirements for their respective program. Acceptability of credit is at Iqra University's discretion and determined by the Head of the Department. A maximum of 50% of coursework can be transferred. Only credits with a grade of C (60%) and above for bachelor's, and B (below 75%) and above for master's programs, are accepted. Remedial, vocational, technical, highly specialized, and personal development courses are not accepted for credit. Grades from other institutions are not included in Iqra University's GPA calculation. A transfer fee of Rs. 2000/- per credit hour applies, except for transfers within IU campuses. Required documents for transfer include a duly completed Transfer of Credit form, mark sheets/transcripts, and course outlines.`,
                    keywords: ['transfer credits', 'transfer policy', 'HEC recognized', 'credit transfer fee', 'course exemption', 'acceptable grades']
                },
                {
                    id: 'course_exemption',
                    title: 'Course Exemption Policy',
                    content: `If a student is awarded an exemption in any course based on their past academic record, another course will replace that course. The course exemption will not reduce the total number of required courses or credit hours for the degree. The Registrar's decision on accepting or rejecting a course exemption case is final, and a proper course exemption form must be filled.`,
                    keywords: ['course exemption', 'exemption policy', 'reduce credit hours', 'registrar decision']
                },
                {
                    id: 'online_admission_procedure',
                    title: 'Online Admission Procedure Steps',
                    content: `The online admission process involves:
                    Step 1: Open the online admission portal (admissions.iqra.edu.pk).
                    Step 2: Complete the admission form (Admission Info, Basic Info, Residence Info, Guardians Info, Academic Information, Documents upload, Agreement).
                    Step 3: Pay the non-refundable application processing fee of Rs. 1000 online or physically, and upload proof of payment.
                    Step 4: Admit card is issued automatically once you reach this stage.
                    Step 5: Take the Entrance Test (computerized, MCQs based: English, Mathematics, General Knowledge, IQ). Date communicated via email/SMS.
                    Step 6: Attend the Interview (may be same day as test or communicated later).
                    Step 7: Semester fee voucher is issued after clearing test and interview. Pay fee and upload proof to the portal to receive your student ID.`,
                    keywords: ['online admission', 'admission procedure', 'application process', 'admission portal', 'fee', 'admit card', 'entrance test', 'interview', 'fee voucher', 'student ID']
                },
                {
                    id: 'admission_test',
                    title: 'Admission Test Details',
                    content: `All applicants (unless exempted by acceptable standardized test scores like NTS-NAT, MCAT, GAT General/Subject) are required to take the computerized, MCQ-based entrance test. The test is two hours long and consists of 120 multiple-choice questions. Subjects typically include English, Mathematics, General Knowledge, and IQ. Some specific programs might have Quantitative Analysis or Biology sections. Iqra University provides necessary stationery, and calculators are prohibited. Violation of instructions leads to automatic disqualification.`,
                    keywords: ['admission test', 'entrance exam', 'test format', 'MCQs', 'test subjects', 'NTS-NAT', 'MCAT', 'GAT', 'test exemption']
                },
                {
                    id: 'required_documents',
                    title: 'Required Documents for Admission',
                    content: `At the time of admission, applicants must submit: mark sheets of all previously completed academic work, an Equivalence Certificate from IBCC (for foreign education systems), 4 passport-sized photographs, roll number slip of previously appeared exam (for result-awaiting students), copy of National Identity Card and/or Form B, and copy of Father's National Identity Card. All required documents should be uploaded online at the admission portal.`,
                    keywords: ['required documents', 'admission documents', 'mark sheets', 'IBCC', 'photographs', 'CNIC', 'Form B']
                },
                {
                    id: 'student_orientation',
                    title: 'Student Orientation Program',
                    content: `All new students admitted to the university are required to attend an Orientation program. This program provides students with information regarding the university's academic and administrative policies, procedures, facilities, services, responsibilities, and student code of conduct.`,
                    keywords: ['orientation program', 'new students', 'university policies', 'student life']
                }
            ];

            // Function to scroll to the bottom of the messages container
            const scrollToBottom = () => {
                messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
            };

            // Effect to scroll to the bottom whenever messages are updated
            useEffect(() => {
                scrollToBottom();
            }, [messages]);

            // Function to retrieve relevant documents from the knowledge base
            const retrieveDocuments = (query) => {
                const lowerCaseQuery = query.toLowerCase();
                const retrieved = knowledgeBase.filter(doc => {
                    // Combine title and content for comprehensive keyword matching
                    const searchableText = `${doc.title.toLowerCase()} ${doc.content.toLowerCase()}`;
                    // Check if any keyword matches
                    const keywordMatch = doc.keywords.some(keyword => lowerCaseQuery.includes(keyword.toLowerCase()));
                    // Check if any significant word from query exists in title or content
                    const queryWordMatch = lowerCaseQuery.split(' ').some(word =>
                        word.length > 2 && searchableText.includes(word)
                    );
                    return keywordMatch || queryWordMatch;
                });
                return retrieved;
            };

            // Function to handle sending a message
            const handleSendMessage = async () => {
                if (inputMessage.trim() === '') return;

                const newUserMessage = { sender: 'user', text: inputMessage };
                setMessages((prevMessages) => [...prevMessages, newUserMessage]);
                setInputMessage('');
                setIsLoading(true);

                try {
                    // Step 1: Retrieve relevant documents
                    const relevantDocs = retrieveDocuments(inputMessage);
                    let context = '';
                    if (relevantDocs.length > 0) {
                        context = relevantDocs.map(doc => `Title: ${doc.title}\nContent: ${doc.content}`).join('\n\n---\n\n');
                        console.log("Retrieved Context:", context); // For debugging
                    } else {
                        context = "No specific context from Iqra University's admission policy found for this query. I will try to answer generally based on common university policies, if applicable.";
                    }

                    // Step 2: Construct the prompt for the LLM
                    const prompt = `You are a helpful RAG-based AI assistant specializing in Iqra University's admission policies.
                    ${relevantDocs.length > 0 ? "Use the following context to answer the user's question, focusing ONLY on the details provided in this context. Do not use outside knowledge about other universities unless explicitly asked to compare.\n" + context : ""}
                    If the question cannot be answered from the provided context, state clearly that you do not have enough specific information about Iqra University's policy for that topic. Do not invent information.

                    User's question: "${inputMessage}"`;

                    // Step 3: Call the Gemini API for text generation
                    let chatHistory = [];
                    chatHistory.push({ role: "user", parts: [{ text: prompt }] });
                    const payload = { contents: chatHistory };
                    const apiKey = ""; // Canvas will provide this at runtime
                    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

                    const response = await fetch(apiUrl, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payload)
                    });

                    const result = await response.json();

                    let botResponseText = "Sorry, I couldn't get a response from the AI regarding Iqra University's policies. Please try again.";
                    if (result.candidates && result.candidates.length > 0 &&
                        result.candidates[0].content && result.candidates[0].content.parts &&
                        result.candidates[0].content.parts.length > 0) {
                        botResponseText = result.candidates[0].content.parts[0].text;
                    } else {
                        console.error("Unexpected API response structure:", result);
                    }

                    setMessages((prevMessages) => [...prevMessages, { sender: 'bot', text: botResponseText, originalText: relevantDocs.length > 0 ? relevantDocs[0].content : null }]);
                } catch (error) {
                    console.error('Error sending message to LLM:', error);
                    setMessages((prevMessages) => [...prevMessages, { sender: 'bot', text: 'Error: Could not connect to the AI. Please try again.' }]);
                } finally {
                    setIsLoading(false);
                }
            };

            // Function to summarize a given text using the Gemini API
            const handleSummarize = async (textToSummarize) => {
                if (!textToSummarize) return;

                setIsLoading(true);
                const summaryPrompt = `Please provide a concise summary of the following text, focusing on the key points related to Iqra University admission policies:\n\n${textToSummarize}`;

                try {
                    let chatHistory = [];
                    chatHistory.push({ role: "user", parts: [{ text: summaryPrompt }] });
                    const payload = { contents: chatHistory };
                    const apiKey = "";
                    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

                    const response = await fetch(apiUrl, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payload)
                    });

                    const result = await response.json();

                    let summaryText = "Could not generate a summary.";
                    if (result.candidates && result.candidates.length > 0 &&
                        result.candidates[0].content && result.candidates[0].content.parts &&
                        result.candidates[0].content.parts.length > 0) {
                        summaryText = result.candidates[0].content.parts[0].text;
                    } else {
                        console.error("Unexpected API response structure for summary:", result);
                    }

                    setMessages((prevMessages) => [...prevMessages, { sender: 'bot', text: `✨ Summary: ${summaryText}` }]);
                } catch (error) {
                    console.error('Error summarizing text:', error);
                    setMessages((prevMessages) => [...prevMessages, { sender: 'bot', text: 'Error: Could not generate a summary.' }]);
                } finally {
                    setIsLoading(false);
                }
            };


            return (
                <div className="flex flex-col h-screen bg-gray-100 font-inter p-4 sm:p-6 md:p-8">
                    {/* Chat Header */}
                    <div className="flex-shrink-0 bg-white rounded-t-xl shadow-md p-4 mb-4">
                        <h1 className="text-2xl font-bold text-gray-800 text-center">Iqra University Admission Policy Chatbot</h1>
                        <p className="text-sm text-gray-600 text-center mt-1">Ask me anything about Iqra University's admission policies!</p>
                    </div>

                    {/* Message Display Area */}
                    <div className="flex-1 bg-white rounded-b-xl shadow-md overflow-y-auto p-4 flex flex-col space-y-3">
                        {messages.map((msg, index) => (
                            <div
                                key={index}
                                className={`flex ${msg.sender === 'user' ? 'justify-end' : 'justify-start'}`}
                            >
                                <div
                                    className={`max-w-[75%] rounded-lg px-4 py-2 text-sm ${
                                        msg.sender === 'user'
                                            ? 'bg-blue-500 text-white rounded-br-none'
                                            : 'bg-gray-200 text-gray-800 rounded-bl-none'
                                    } shadow-sm`}
                                >
                                    {msg.text}
                                </div>
                                {msg.sender === 'bot' && msg.originalText && (
                                    <button
                                        onClick={() => handleSummarize(msg.originalText)}
                                        className="ml-2 mt-1 px-3 py-1 bg-purple-500 text-white text-xs rounded-lg hover:bg-purple-600 focus:outline-none focus:ring-2 focus:ring-purple-500 transition-colors duration-200"
                                        disabled={isLoading}
                                    >
                                        ✨ Summarize
                                    </button>
                                )}
                            </div>
                        ))}
                        {isLoading && (
                            <div className="flex justify-start">
                                <div className="max-w-[75%] bg-gray-200 text-gray-800 rounded-lg rounded-bl-none px-4 py-2 text-sm shadow-sm">
                                    <div className="flex items-center">
                                        <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-gray-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                                            <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                        </svg>
                                        Typing...
                                    </div>
                                </div>
                            </div>
                        )}
                        <div ref={messagesEndRef} /> {/* Dummy div for scrolling */}
                    </div>

                    {/* Message Input Area */}
                    <div className="flex-shrink-0 mt-4">
                        <div className="flex items-center bg-white rounded-xl shadow-md p-3">
                            <input
                                type="text"
                                className="flex-1 p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                                placeholder="E.g., What are the eligibility criteria for a BS program?"
                                value={inputMessage}
                                onChange={(e) => setInputMessage(e.target.value)}
                                onKeyPress={(e) => {
                                    if (e.key === 'Enter') {
                                        handleSendMessage();
                                    }
                                }}
                                disabled={isLoading}
                            />
                            <button
                                onClick={handleSendMessage}
                                className="ml-3 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 active:bg-blue-800 transition-colors duration-200"
                                disabled={isLoading}
                            >
                                Send
                            </button>
                        </div>
                    </div>
                </div>
            );
        }

        // Render the App component into the root div
        ReactDOM.render(<App />, document.getElementById('root'));
    </script>
</body>
</html>
